
import argparse, json, os, sys, time, random
from datetime import datetime

def iso():
    return datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--run-id", required=True)
    ap.add_argument("--step-id", required=True)
    ap.add_argument("--agent", required=True)
    ap.add_argument("--prompt", required=True)
    ap.add_argument("--repo", required=True)
    ap.add_argument("--report", required=True)
    args = ap.parse_args()

    # Simulate doing work (replace this with a real `codex exec` call)
    start = iso()
    try:
        # Read the prompt (not used, just for realism)
        with open(args.prompt, "r", encoding="utf-8") as f:
            _ = f.read()

        # Simulated execution time
        time.sleep(0.3 + random.random()*0.7)

        # Write a demo artifact
        artifacts_dir = os.path.join(args.repo, ".agents", "artifacts", f"{args.run_id}__{args.step_id}")
        os.makedirs(artifacts_dir, exist_ok=True)
        artifact_path = os.path.join(artifacts_dir, "artifact.txt")
        with open(artifact_path, "w", encoding="utf-8") as f:
            f.write(f"Generated by {args.agent} for step {args.step_id} at {iso()}\n")

        report = {
            "schema": "run_report@v0",
            "run_id": args.run_id,
            "step_id": args.step_id,
            "agent": args.agent,
            "status": "COMPLETED",
            "started_at": start,
            "ended_at": iso(),
            "artifacts": [artifact_path],
            "metrics": {
                "tokens_in": 0,
                "tokens_out": 0,
                "duration_ms": 0,
            },
            "logs": ["Simulated agent run completed."],
            "next_suggested_steps": [],
        }

        # Emit to stdout (optional)
        print("<<<RUN_REPORT_JSON")
        print(json.dumps(report, indent=2))
        print("RUN_REPORT_JSON>>>")

        # Persist the report file for the orchestrator to detect
        with open(args.report, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2)

    except Exception as e:
        report = {
            "schema": "run_report@v0",
            "run_id": args.run_id,
            "step_id": args.step_id,
            "agent": args.agent,
            "status": "FAILED",
            "started_at": start,
            "ended_at": iso(),
            "artifacts": [],
            "metrics": {},
            "logs": [f"error: {str(e)}"],
        }
        with open(args.report, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2)
        print(f"[wrapper] step {args.step_id} failed: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
